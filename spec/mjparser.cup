package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import java.io.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
    boolean errorDetected = false;
    boolean fatalErrorDetected = false;

    Logger log = Logger.getLogger(getClass());

    /***********************************************************************
    * slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
    ***********************************************************************/
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
        done_parsing();
        report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        fatalErrorDetected = true;
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
        errorDetected = true;
        StringBuilder msg = new StringBuilder(message);
        if (info instanceof Symbol) {
            msg.append(" na liniji ").append(((Symbol)info).left);
            Symbol s = (Symbol) info;
            if (s != null && s.value != null)
                msg.append(": " + s.value.toString());
        }
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
        StringBuilder msg = new StringBuilder(message);
        if (info instanceof Symbol)
            msg.append(" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
:}

scan with {:
    Symbol s = this.getScanner().next_token();
//    if (s != null && s.value != null)
//        log.info(s.toString() + " " + s.value.toString());
    return s;
:}

terminal PROG, BREAK, CLASS, ELSE, IF, NEW, PRINT, READ, RETURN, VOID, DO, WHILE, EXTENDS, CONTINUE, CONST;
terminal String IDENT;
terminal Integer NUM_CONST;
terminal Character CHAR_CONST;
terminal String BOOL_CONST;
terminal OP_ADD, OP_SUB, OP_MUL, OP_DIV, OP_MOD, OP_EQ, OP_NEQ, OP_GRE, OP_GEQ, OP_LES, OP_LEQ, OP_AND, OP_OR;
terminal ASSIGN;
terminal OP_INC, OP_DEC;
terminal SEMI, COMMA, DOT;
terminal LPAREN, RPAREN, LSQUARE, RSQUARE, LBRACE, RBRACE;

non terminal Program, GlobalDeclList, GlobalDecl, MethodDeclList;
non terminal ConstDecl, ConstValAssignList, ConstValAssign;
non terminal VarDecl, TypeDummy, VarDeclDefine, VarDeclDefineList;
non terminal GlobalVarDecl, GlobalVarDeclDefine, GlobalVarDeclDefineList;
// Field Var start
non terminal FieldVarDeclListLbrace, FieldVarDeclList, FieldVarDecl, FieldVarDeclDefineOrErrorSemi;
non terminal FieldVarMoreListOrErrorSemi, FieldVarDeclLbrace, FieldVarDeclDefineOrErrorLbrace;
non terminal FieldVarMoreListOrErrorLbrace, FieldVarErrorSemi, FieldVarErrorLbrace;
// Field Var end
non terminal ClassDecl, ClassNameExtend, OptExtendsIndicator, ClassDeclExtHelper, FieldVarMethodDeclList;
non terminal MethodDecl, PreFormParsDummy, OptFormPars, VarDeclList, StatementList;
non terminal FormPars, FormParDecl;
non terminal Statement, IfCondition, IfDummy, IfCondParen, OptElseBranch, ElseDummy, DoDummy, WhileDummy;
non terminal DesignatorStatement, PreActParsDummy, OptActPars;
non terminal ActPars, ActPar;
non terminal OrDummy, AndDummy;
non terminal PreArrIdxDummy;
non terminal Relop;
non terminal Addop;
non terminal Mulop;

non terminal rs.etf.pp1.symboltable.concepts.Obj ProgName, ConstVal, MethodSignature, ClassName, VoidableType, Type, Designator;
non terminal rs.etf.pp1.symboltable.concepts.Struct Assignment, FunctionCall, OptExpr, Condition, CondTerm, CondFact, Expr, Term, Factor;


precedence left ELSE;


/***********************************************************************************
* Program = ʺprogramʺ ident {ConstDecl | VarDecl | ClassDecl} ʺ{ʺ {MethodDecl} ʺ}ʺ *
***********************************************************************************/
Program ::= (Program) PROG ProgName GlobalDeclList LBRACE MethodDeclList RBRACE ;

ProgName ::= (ProgName) IDENT ;

GlobalDeclList ::= (GlobalDeclList_NoEps) GlobalDeclList GlobalDecl
                   |
                   (GlobalDeclList_Eps) /* epsilon */
                   ;

GlobalDecl ::= (GlobalDecl_Const) ConstDecl
               |
               (GlobalDecl_Var) GlobalVarDecl
               |
               (GlobalDecl_Class) ClassDecl
               ;

MethodDeclList ::= (MethodDeclList_NoEps) MethodDeclList MethodDecl
                   |
                   (MethodDeclList_Eps) /* epsilon */
                   ;

/***************************************************************************************************************************
* ConstDecl = ʺconstʺ Type identʺ=ʺ(numConst | charConst | boolConst) {, ident ʺ=ʺ (numConst | charConst | boolConst)} ʺ;ʺ *
***************************************************************************************************************************/
ConstDecl ::= (ConstDecl) CONST TypeDummy ConstValAssignList SEMI ;

ConstValAssignList ::= (ConstValAssignList_List) ConstValAssignList COMMA ConstValAssign
                       |
                       (ConstValAssignList_Item) ConstValAssign
                       ;

ConstValAssign ::= (ConstValAssign) IDENT ASSIGN ConstVal ;

ConstVal ::= (ConstVal_Num) NUM_CONST
             |
             (ConstVal_Char) CHAR_CONST
             |
             (ConstVal_Bool) BOOL_CONST
             ;

/***********************************************************
* VarDecl = Type ident [ʺ[ʺ ʺ]ʺ] {ʺ,ʺ ident [ʺ[ʺ ʺ]ʺ]} ʺ;ʺ *
***********************************************************/
VarDecl ::= (VarDecl) TypeDummy VarDeclDefineList SEMI ;

TypeDummy ::= (TypeDummy) Type ;

VarDeclDefineList ::= (VarDeclDefineList_List) VarDeclDefineList COMMA VarDeclDefine
                      |
                      (VarDeclDefineList_Item) VarDeclDefine
                      ;

VarDeclDefine ::= (VarDeclDefine_Single) IDENT
                  |
                  (VarDeclDefine_Array) IDENT LSQUARE RSQUARE
                  ;


GlobalVarDecl ::= (GlobalVarDecl) TypeDummy GlobalVarDeclDefineList SEMI ;

GlobalVarDeclDefineList ::= (GlobalVarDeclDefineList_List) GlobalVarDeclDefineList COMMA GlobalVarDeclDefine
                            |
                            (GlobalVarDeclDefineList_Item) GlobalVarDeclDefine
                            ;

GlobalVarDeclDefine ::= (GlobalVarDeclDefine_Define) VarDeclDefine
                        |
                        (GlobalVarDeclDefine_Error) error:e
                        {: parser.report_info("Oporavak od greske u definiciji globalne promenljive na liniji " + eleft, null); :}
                        ;

/*************************************************************************************
* ClassDecl = ʺclassʺ ident [ʺextendsʺ Type] ʺ{ʺ{VarDecl} [ʺ{ʺ {MethodDecl} ʺ}ʺ] ʺ}ʺ *
*************************************************************************************/
ClassDecl ::= (ClassDecl) CLASS ClassNameExtend FieldVarMethodDeclList RBRACE ;

ClassNameExtend ::= (ClassNameExtend) ClassName OptExtendsIndicator ;

ClassName ::= (ClassName) IDENT ;

OptExtendsIndicator ::= (OptExtendsIndicator_NoEps) EXTENDS Type LBRACE
                        |
                        (OptExtendsIndicator_Error) EXTENDS error:e LBRACE
                        {: parser.report_info("Oporavak od greske nakon 'extends' kljucne reci na liniji " + eleft, null); :}
                        |
                        (OptExtendsIndicator_Eps) /* epsilon */ LBRACE
                        ;

FieldVarMethodDeclList ::= (FieldVarMethodDeclList_Fields) FieldVarDeclList ClassDeclExtHelper
                           |
                           (FieldVarMethodDeclList_FieldsMethods) FieldVarDeclListLbrace ClassDeclExtHelper MethodDeclList RBRACE
                           ;

ClassDeclExtHelper ::= (ClassDeclExtHelper) /* epsilon */ ;

FieldVarDeclListLbrace ::= (FieldVarDeclListLbrace_List) FieldVarDeclList FieldVarDeclLbrace
                           |
                           (FieldVarDeclListLbrace_Lbrace) LBRACE
                           ;

FieldVarDeclList ::= (FieldVarDeclList_NoEps) FieldVarDeclList FieldVarDecl
                     |
                     (FieldVarDeclList_Eps) /* epsilon */
                     ;

FieldVarDecl ::= (FieldVarDecl) TypeDummy FieldVarDeclDefineOrErrorSemi ;

FieldVarDeclDefineOrErrorSemi ::= (FieldVarDeclDefineOrErrorSemi_Define) VarDeclDefine FieldVarMoreListOrErrorSemi
                                  |
                                  (FieldVarDeclDefineOrErrorSemi_Error) FieldVarErrorSemi
                                  ;

FieldVarMoreListOrErrorSemi ::= (FieldVarMoreListOrErrorSemi_Item) COMMA VarDeclDefine FieldVarMoreListOrErrorSemi
                                |
                                (FieldVarMoreListOrErrorSemi_Error) COMMA FieldVarErrorSemi
                                |
                                (FieldVarMoreListOrErrorSemi_Semi) /* epsilon */ SEMI
                                ;

FieldVarDeclLbrace ::= (FieldVarDeclLbrace) TypeDummy FieldVarDeclDefineOrErrorLbrace ;

FieldVarDeclDefineOrErrorLbrace ::= (FieldVarDeclDefineOrErrorLbrace_Item) VarDeclDefine FieldVarMoreListOrErrorLbrace
                                    |
                                    (FieldVarDeclDefineOrErrorLbrace_ErrorSemi) FieldVarErrorSemi LBRACE
                                    |
                                    (FieldVarDeclDefineOrErrorLbrace_ErrorLbrace) FieldVarErrorLbrace
                                    ;

FieldVarMoreListOrErrorLbrace ::= (FieldVarMoreListOrErrorLbrace_Item) COMMA VarDeclDefine FieldVarMoreListOrErrorLbrace
                                  |
                                  (FieldVarMoreListOrErrorLbrace_ErrorSemi) COMMA FieldVarErrorSemi LBRACE
                                  |
                                  (FieldVarMoreListOrErrorLbrace_ErrorLbrace) COMMA FieldVarErrorLbrace
                                  |
                                  (FieldVarMoreListOrErrorLbrace_SemiLbrace) /* epsilon */ SEMI LBRACE
                                  ;

FieldVarErrorSemi ::= (FieldVarErrorSemi) error:e SEMI
                      {: parser.report_info("Oporavak od greske do znaka ';' u definiciji polja unutrasnje klase na liniji " + eleft, null); :}
                      ;

FieldVarErrorLbrace ::= (FieldVarErrorLbrace) error:e LBRACE
                        {: parser.report_info("Oporavak od greske do znaka '{' u definiciji polja unutrasnje klase na liniji " + eleft, null); :}
                        ;

/**************************************************************************************
* MethodDecl = (Type | ʺvoidʺ) ident ʺ(ʺ [FormPars] ʺ)ʺ {VarDecl} ʺ{ʺ {Statement} ʺ}ʺ *
***************************************************************************************/
MethodDecl ::= (MethodDecl) MethodSignature VarDeclList LBRACE StatementList RBRACE ;

MethodSignature ::= (MethodSignature) VoidableType IDENT LPAREN PreFormParsDummy OptFormPars RPAREN ;

VoidableType ::= (VoidableType_Type) Type
                 |
                 (VoidableType_Void) VOID
                 ;

PreFormParsDummy ::= (PreFormParsDummy) /* epsilon */ ;

OptFormPars ::= (OptFormPars_NoEps) FormPars
                |
                (OptFormPars_Eps) /* epsilon */
                ;

VarDeclList ::= (VarDeclList_NoEps) VarDeclList VarDecl
                |
                (VarDeclList_Eps) /* epsilon */
                ;

StatementList ::= (StatementList_NoEps) StatementList Statement
                  |
                  (StatementList_Eps) /* epsilon */
                  ;

/*************************************************************
* FormPars = Type ident [ʺ[ʺ ʺ]ʺ] {ʺ,ʺ Type ident [ʺ[ʺ ʺ]ʺ]} *
**************************************************************/
FormPars ::= (FormPars_List) FormPars COMMA FormParDecl
             |
             (FormPars_Decl) FormParDecl
             ;

FormParDecl ::= (FormParDecl_Single) Type IDENT
                |
                (FormParDecl_Array) Type IDENT LSQUARE RSQUARE
                |
                (FormParDecl_Error) error:e
                {: parser.report_info("Oporavak od greske u deklaraciji formalnih parametara na liniji " + eleft, null); :}
                ;

/***************
* Type = ident *
****************/
Type ::= (Type) IDENT ;

/******************************************************************
* Statement = DesignatorStatement ʺ;ʺ                             *
*           | ʺifʺ ʺ(ʺ Condition ʺ)ʺ Statement [ʺelseʺ Statement] *
*           | ʺdoʺ Statement ʺwhileʺ ʺ(ʺ Condition ʺ)ʺ ʺ;ʺ        *
*           | ʺbreakʺ ʺ;ʺ                                         *
*           | ʺcontinueʺ ʺ;ʺ                                      *
*           | ʺreturnʺ [Expr] ʺ;ʺ                                 *
*           | ʺreadʺ ʺ(ʺ Designator ʺ)ʺ ʺ;ʺ                       *
*           | ʺprintʺ ʺ(ʺ Expr [ʺ,ʺ numConst] ʺ)ʺ ʺ;ʺ             *
*           | ʺ{ʺ {Statement} ʺ}ʺ                                 *
******************************************************************/
Statement ::= (Statement_Desig) DesignatorStatement
              |
              (Statement_If) IfCondition Statement OptElseBranch
              |
              (Statement_DoWhile) DoDummy Statement WhileDummy LPAREN Condition RPAREN SEMI
              |
              (Statement_Break) BREAK SEMI
              |
              (Statement_Cont) CONTINUE SEMI
              |
              (Statement_Return) RETURN OptExpr SEMI
              |
              (Statement_Read) READ LPAREN Designator RPAREN SEMI
              |
              (Statement_Print) PRINT LPAREN Expr RPAREN SEMI
              |
              (Statement_PrintParam) PRINT LPAREN Expr COMMA NUM_CONST RPAREN SEMI
              |
              (Statement_Brace) LBRACE StatementList RBRACE
              ;

IfCondition ::= (IfCondition_Cond) IfDummy IfCondParen ;

IfDummy ::= (IfDummy) IF ;

IfCondParen ::= (IfCondParen_Cond) LPAREN Condition RPAREN
                |
                (IfCondParen_Error) LPAREN error:e RPAREN
                {: parser.report_info("Oporavak od greske u 'if' konstrukciji na liniji " + eleft, null); :}
                ;

OptElseBranch ::= (OptElseBranch_NoEps) ElseDummy Statement
                  |
                  (OptElseBranch_Eps) /* epsilon */
                  ;

ElseDummy ::= (ElseDummy) ELSE ;

DoDummy ::= (DoDummy) DO ;

WhileDummy ::= (WhileDummy) WHILE ;

OptExpr ::= (OptExpr_NoEps) Expr
            |
            (OptExpr_Eps) /* epsilon */
            ;

/*******************************************************************************
* DesignatorStatement = Designator (ʺ=ʺ Expr | ʺ(ʺ [ActPars] ʺ)ʺ | ʺ++ʺ | ʺ--ʺ) *
*******************************************************************************/
DesignatorStatement ::= (DesignatorStatement_Assign) Designator Assignment
                        |
                        (DesignatorStatement_Func) FunctionCall SEMI
                        |
                        (DesignatorStatement_Inc) Designator OP_INC SEMI
                        |
                        (DesignatorStatement_Dec) Designator OP_DEC SEMI
                        ;

Assignment ::= (Assignment_Expr) ASSIGN Expr SEMI
               |
               (Assignment_Error) ASSIGN error:e SEMI
               {: parser.report_info("Oporavak od greske u konstrukciji iskaza dodele na liniji " + eleft, null); :}
               ;

FunctionCall ::= (FunctionCall) Designator LPAREN PreActParsDummy OptActPars RPAREN ;

PreActParsDummy ::= (PreActParsDummy) /* epsilon */ ;

OptActPars ::= (OptActPars_NoEps) ActPars
               |
               (OptActPars_Eps) /* epsilon */
               ;

/****************************
* ActPars = Expr {ʺ,ʺ Expr} *
****************************/
ActPars ::= (ActPars_Chain) ActPars COMMA ActPar
            |
            (ActPars_Item) ActPar
            ;

ActPar ::= (ActPar) Expr ;

/***************************************
* Condition = CondTerm {ʺ||ʺ CondTerm} *
***************************************/
Condition ::= (Condition_Chain) Condition OrDummy CondTerm
              |
              (Condition_Item) CondTerm
              ;

OrDummy ::= (OrDummy) OP_OR ;

/**************************************
* CondTerm = CondFact {ʺ&&ʺ CondFact} *
**************************************/
CondTerm ::= (CondTerm_Chain) CondTerm AndDummy CondFact
             |
             (CondTerm_Item) CondFact
             ;

AndDummy ::= (AndDummy) OP_AND ;

/*******************************
* CondFact = Expr [Relop Expr] *
*******************************/
CondFact ::= (CondFact_Expr) Expr
             |
             (CondFact_Relop) Expr Relop Expr
             ;

/*********************************
* Expr = [ʺ-ʺ] Term {Addop Term} *
*********************************/
Expr ::= (Expr_Term) Term
         |
         (Expr_Neg) OP_SUB Term
         |
         (Expr_Addop) Expr Addop Term
         ;

/*******************************
* Term = Factor {Mulop Factor} *
*******************************/
Term ::= (Term_Factor) Factor
         |
         (Term_Mulop) Term Mulop Factor
         ;

/******************************************
* Factor = Designator [ʺ(ʺ [ActPars] ʺ)ʺ] *
*        | numConst                       *
*        | charConst                      *
*        | boolConst                      *
*        | ʺnewʺ Type [ʺ[ʺ Expr ʺ]ʺ]      *
*        | ʺ(ʺ Expr ʺ)ʺ.                  *
******************************************/
Factor ::= (Factor_Desig) Designator
           |
           (Factor_DesigFunc) FunctionCall
           |
           (Factor_ConstVal) ConstVal
           |
           (Factor_New) NEW Type
           |
           (Factor_NewArr) NEW Type LSQUARE Expr RSQUARE
           |
           (Factor_Paren) LPAREN Expr RPAREN
           ;

/************************************************
* Designator = ident {ʺ.ʺ ident | ʺ[ʺ Expr ʺ]ʺ} *
************************************************/
Designator ::= (Designator_Field) Designator DOT IDENT
               |
               (Designator_Array) Designator LSQUARE PreArrIdxDummy Expr RSQUARE
               |
               (Designator_Ident) IDENT
               ;

PreArrIdxDummy ::= (PreArrIdxDummy) /* epsilon */ ;

/************************************************
* Relop = ʺ==ʺ | ʺ!=ʺ | ʺ>ʺ | ʺ>=ʺ | ʺ<ʺ | ʺ<=ʺ *
************************************************/
Relop ::= (Relop_Eq) OP_EQ
          |
          (Relop_Neq) OP_NEQ
          |
          (Relop_Gre) OP_GRE
          |
          (Relop_Geq) OP_GEQ
          |
          (Relop_Les) OP_LES
          |
          (Relop_Leq) OP_LEQ
          ;

/********************
* Addop = ʺ+ʺ | ʺ-ʺ *
********************/
Addop ::= (Addop_Add) OP_ADD
          |
          (Addop_Sub) OP_SUB
          ;

/**************************
* Mulop = ʺ*ʺ | ʺ/ʺ | ʺ%ʺ *
**************************/
Mulop ::= (Mulop_Mul) OP_MUL
          |
          (Mulop_Div) OP_DIV
          |
          (Mulop_Mod) OP_MOD
          ;