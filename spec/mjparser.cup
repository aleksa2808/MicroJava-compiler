package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import java.io.*;
import org.apache.log4j.*;
//import rs.ac.bg.etf.pp1.ast.*;



parser code {:
    int printCallCount = 0;

    Logger log = Logger.getLogger(getClass());

    /***********************************************************************
    * slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
    ***********************************************************************/
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder(message);
        if (info instanceof Symbol)
            msg.append(" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
:}

scan with {:
    Symbol s = this.getScanner().next_token();
    if (s != null && s.value != null)
        log.info(s.toString() + " " + s.value.toString());
    return s;
:}

terminal PROG, BREAK, CLASS, ELSE, IF, NEW, PRINT, READ, RETURN, VOID, DO, WHILE, EXTENDS, CONTINUE, CONST;
terminal String IDENT;
terminal Integer NUM_CONST;
terminal String CHAR_CONST;
terminal String BOOL_CONST;
terminal OP_ADD, OP_SUB, OP_MUL, OP_DIV, OP_MOD, OP_EQ, OP_NEQ, OP_GRE, OP_GEQ, OP_LES, OP_LEQ, OP_AND, OP_OR;
terminal ASSIGN, ASSIGN_ADD, ASSIGN_SUB, ASSIGN_MUL, ASSIGN_DIV, ASSIGN_MOD;
terminal OP_INC, OP_DEC;
terminal SEMI, COMMA, DOT;
terminal LPAREN, RPAREN, LSQUARE, RSQUARE, LBRACE, RBRACE;

non terminal Program, DeclList, Decl;
non terminal ConstDecl, ConstVal, ConstDeclMore, ConstValAssign;
non terminal VarDecl, OptArrayIndicator, VarDeclMore;
non terminal ClassDecl, OptExtendsIndicator, OptBracedMethodDeclList, MethodDeclList;
non terminal MethodDecl, VoidableType, OptFormPars, VarDeclList, StatementList;
non terminal FormPars, FormParDecl;
non terminal Type;
non terminal Statement, OptElseBranch, OptExpr, OptPrintMore;
non terminal DesignatorStatement, DesignatorJob, OptActPars;
non terminal ActPars;
non terminal Condition;
non terminal CondTerm;
non terminal CondFact;
non terminal Expr, OptNeg, TermMore;
non terminal Term;
non terminal Factor, OptParenActPars, OptArrayExpr;
non terminal Designator, DesignatorMore, DesignatorMoreChoice;
non terminal Relop;
non terminal Addop;
non terminal Mulop;

non terminal Obj ProgramName;

precedence left ELSE;


/***********************************************************************************
* Program = ʺprogramʺ ident {ConstDecl | VarDecl | ClassDecl} ʺ{ʺ {MethodDecl} ʺ}ʺ *
***********************************************************************************/
Program ::= PROG ProgramName:p DeclList LBRACE MethodDeclList RBRACE ;

ProgramName ::= IDENT:pName
{:
    RESULT = Tab.insert(Obj.Prog, pName, Tab.noType);
    Tab.openScope();
:};

DeclList ::= DeclList Decl
             |
             /* epsilon */
             ;

Decl ::= ConstDecl
         |
         VarDecl
         |
         ClassDecl
         ;

/***************************************************************************************************************************
* ConstDecl = ʺconstʺ Type identʺ=ʺ(numConst | charConst | boolConst) {, ident ʺ=ʺ (numConst | charConst | boolConst)} ʺ;ʺ *
***************************************************************************************************************************/
ConstDecl ::= CONST Type ConstValAssign ConstDeclMore SEMI ;

ConstVal ::= NUM_CONST
             |
             CHAR_CONST
             |
             BOOL_CONST
             ;

ConstDeclMore ::= ConstDeclMore COMMA ConstValAssign
                  |
                  /* epsilon */
                  ;

ConstValAssign ::= IDENT ASSIGN ConstVal ;

/***********************************************************
* VarDecl = Type ident [ʺ[ʺ ʺ]ʺ] {ʺ,ʺ ident [ʺ[ʺ ʺ]ʺ]} ʺ;ʺ *
***********************************************************/
VarDecl ::= Type IDENT OptArrayIndicator VarDeclMore SEMI ;

OptArrayIndicator ::= LSQUARE RSQUARE
                      |
                      /* epsilon */
                      ;

VarDeclMore ::= VarDeclMore COMMA IDENT OptArrayIndicator
                |
                /* epsilon */
                ;

/****************************************************************************
* ClassDecl = ʺclassʺ ident [ʺextendsʺ Type] ʺ{ʺ [ʺ{ʺ {MethodDecl} ʺ}ʺ] ʺ}ʺ *
****************************************************************************/
ClassDecl ::= CLASS IDENT OptExtendsIndicator LBRACE DeclList OptBracedMethodDeclList RBRACE ;
// IZMENJENA POSTAVKA: Dodati atributi klase         ********

OptExtendsIndicator ::= EXTENDS Type
                        |
                        /* epsilon */
                        ;

OptBracedMethodDeclList ::= LBRACE MethodDeclList RBRACE
                            |
                            /* epsilon */
                            ;

MethodDeclList ::= MethodDeclList MethodDecl
                   |
                   /* epsilon */
                   ;

/**************************************************************************************
* MethodDecl = (Type | ʺvoidʺ) ident ʺ(ʺ [FormPars] ʺ)ʺ {VarDecl} ʺ{ʺ {Statement} ʺ}ʺ *
***************************************************************************************/
MethodDecl ::= VoidableType IDENT LPAREN OptFormPars RPAREN VarDeclList LBRACE StatementList RBRACE ;

VoidableType ::= Type
                 |
                 VOID
                 ;

OptFormPars ::= FormPars
                |
                /* epsilon */
                ;

VarDeclList ::= VarDeclList VarDecl
                |
                /* epsilon */
                ;

StatementList ::= StatementList Statement
                  |
                  /* epsilon */
                  ;

/*************************************************************
* FormPars = Type ident [ʺ[ʺ ʺ]ʺ] {ʺ,ʺ Type ident [ʺ[ʺ ʺ]ʺ]} *
**************************************************************/
FormPars ::= FormPars COMMA FormParDecl
             |
             FormParDecl
             ;

FormParDecl ::= Type IDENT OptArrayIndicator ;

/***************
* Type = ident *
****************/
Type ::= IDENT ;

/******************************************************************
* Statement = DesignatorStatement ʺ;ʺ                             *
*           | ʺifʺ ʺ(ʺ Condition ʺ)ʺ Statement [ʺelseʺ Statement] *
*           | ʺdoʺ Statement ʺwhileʺ ʺ(ʺ Condition ʺ)ʺ ʺ;ʺ        *
*           | ʺbreakʺ ʺ;ʺ                                         *
*           | ʺcontinueʺ ʺ;ʺ                                      *
*           | ʺreturnʺ [Expr] ʺ;ʺ                                 *
*           | ʺreadʺ ʺ(ʺ Designator ʺ)ʺ ʺ;ʺ                       *
*           | ʺprintʺ ʺ(ʺ Expr [ʺ,ʺ numConst] ʺ)ʺ ʺ;ʺ             *
*           | ʺ{ʺ {Statement} ʺ}ʺ                                 *
******************************************************************/
Statement ::= DesignatorStatement SEMI
            |
            IF LPAREN Condition RPAREN Statement OptElseBranch
            |
            DO Statement WHILE LPAREN Condition RPAREN SEMI
            |
            BREAK SEMI
            |
            CONTINUE SEMI
            |
            RETURN OptExpr SEMI
            |
            READ LPAREN Designator RPAREN SEMI
            |
            PRINT LPAREN Expr OptPrintMore RPAREN SEMI
            {: this.parser.printCallCount++; :}
            |
            LBRACE StatementList RBRACE
            ;

OptElseBranch ::= ELSE Statement
                  |
                  /* epsilon */
                  ;

OptExpr ::= Expr
            |
            /* epsilon */
            ;

OptPrintMore ::= SEMI NUM_CONST
                 |
                 /* epsilon */
                 ;

/*******************************************************************************
* DesignatorStatement = Designator (ʺ=ʺ Expr | ʺ(ʺ [ActPars] ʺ)ʺ | ʺ++ʺ | ʺ‐‐ʺ) *
*******************************************************************************/
DesignatorStatement ::= Designator DesignatorJob ;

DesignatorJob ::= ASSIGN Expr
                  |
                  LPAREN OptActPars RPAREN
                  |
                  OP_INC
                  |
                  OP_DEC
                  ;

OptActPars ::= ActPars
               |
               /* epsilon */
               ;

/****************************
* ActPars = Expr {ʺ,ʺ Expr} *
****************************/
ActPars ::= ActPars COMMA Expr
            |
            Expr
            ;

/***************************************
* Condition = CondTerm {ʺ||ʺ CondTerm} *
***************************************/
Condition ::= Condition OP_OR CondTerm
              |
              CondTerm
              ;

/**************************************
* CondTerm = CondFact {ʺ&&ʺ CondFact} *
**************************************/
CondTerm ::= CondTerm OP_AND CondFact
             |
             CondFact
             ;

/*******************************
* CondFact = Expr [Relop Expr] *
*******************************/
CondFact ::= Expr
             |
             Expr Relop Expr
             ;

/*********************************
* Expr = [ʺ‐ʺ] Term {Addop Term} *
*********************************/
Expr ::= OptNeg Term TermMore ;

OptNeg ::= OP_SUB
           |
           /* epsilon */
           ;

TermMore ::= TermMore Addop Term
             |
             /* epsilon */
             ;

/*******************************
* Term = Factor {Mulop Factor} *
*******************************/
Term ::= Term Mulop Factor
         |
         Factor
         ;

/******************************************
* Factor = Designator [ʺ(ʺ [ActPars] ʺ)ʺ] *
*        | numConst                       *
*        | charConst                      *
*        | boolConst                      *
*        | ʺnewʺ Type [ʺ[ʺ Expr ʺ]ʺ]      *
*        | ʺ(ʺ Expr ʺ)ʺ.                  *
******************************************/
Factor ::= Designator OptParenActPars
           |
           NUM_CONST
           |
           CHAR_CONST
           |
           BOOL_CONST
           |
           NEW Type OptArrayExpr
           |
           LPAREN Expr RPAREN
           ;

OptParenActPars ::= LPAREN OptActPars RPAREN
                    |
                    /* epsilon */
                    ;

OptArrayExpr ::= LSQUARE Expr RSQUARE
                 |
                 /* epsilon */
                 ;

/************************************************
* Designator = ident {ʺ.ʺ ident | ʺ[ʺ Expr ʺ]ʺ} *
************************************************/
Designator ::= IDENT DesignatorMore ;

DesignatorMore ::= DesignatorMore DesignatorMoreChoice
                   |
                   /* epsilon */
                   ;

DesignatorMoreChoice ::= DOT IDENT
                         |
                         LSQUARE Expr RSQUARE
                         ;

/************************************************
* Relop = ʺ==ʺ | ʺ!=ʺ | ʺ>ʺ | ʺ>=ʺ | ʺ<ʺ | ʺ<=ʺ *
************************************************/
Relop ::= OP_EQ
          |
          OP_NEQ
          |
          OP_GRE
          |
          OP_GEQ
          |
          OP_LES
          |
          OP_LEQ
          ;

/********************
* Addop = ʺ+ʺ | ʺ‐ʺ *
********************/
Addop ::= OP_ADD
          |
          OP_SUB
          ;

/**************************
* Mulop = ʺ*ʺ | ʺ/ʺ | ʺ%ʺ *
**************************/
Mulop ::= OP_MUL
          |
          OP_DIV
          |
          OP_MOD
          ;